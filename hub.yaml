substitutions:
  devicename: hub
  comment: ""
  light_address_1: "{0x50,0x02,0x92,0x3F,0xF7,0x2F}"
  light_address_2: "{0x70,0x03,0x9F,0xD0,0x49,0xE6}"

esphome:
  name: $devicename
  comment: $comment
  platform: ESP8266
  board: d1_mini
  includes:
  - lib/MeshRC.h
  - lib/esp_now_light.h

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

  
web_server:
  port: 80


wifi:
  ssid: !wifi_ssid
  password: !wifi_password

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "$devicename Fallback Hotspot"
    password: "0122345318"
    
  power_save_mode: none

 globals:
   - id: my_global_int
     type: int
     restore_value: no
     initial_value: '0'
  
sensor:
  - platform: wifi_signal
    name: $devicename Wifi Signal Strength
    update_interval: 60s
  - platform: uptime
    name: $devicename Uptime
    
# Individual text sensors
text_sensor:
# Reports the ESPHome Version with compile date
- platform: version
  name: $devicename ESPHome Version
      
##Device Specific Config

binary_sensor:
  - platform: gpio
    pin:
      number: D8
      mode: INPUT_PULLUP
      inverted: True
    name: "Ceiling Lights"
    on_multi_click:
 #single click   
    - timing:
      - ON for at most 1s
      - OFF for at least 0.3s
      then:
        - if:
            condition:
              - wifi.connected:
              - api.connected:
              - switch.is_on: relay_1
            then:
              - logger.log: "Single Click"
              - homeassistant.service:
                  service: light.toggle
                  data:
                     entity_id: light.living_room_lights_prime
              # - homeassistant.event: esphome.button_pressed # action when api is connected
            else:
              # - logger.log: "No api connection - let's solve things locally"
              - switch.toggle: "relay_1"
    #double click
    - timing:
        - ON for at most 1s
        - OFF for at most 1s
        - ON for at most 1s
        - OFF for at least 0.2s
      then:
        - if:
            condition:
              and:
                - wifi.connected:
                - api.connected:
            # send double click event in case wifi and api are conncected
            then:
              - logger.log: "Double Click"
              - homeassistant.event:
                  event: esphome.button_pressed
                  data:
                    title: 4g button 1 double click
            # toggle relay in case either wifi or api are not connected
            else:
              - switch.toggle: "relay_1"
      # long click
    - timing:
        - ON for at least 1s
      then:
        - if:
            condition:
              and:
                - wifi.connected:
                - api.connected:
            # send long click event in case wifi and api are conncected
            then:
              - logger.log: "Long Click"
              - homeassistant.event:
                  event: esphome.button_pressed
                  data:
                    title: 4g button 1 long click
            # toggle relay in case either wifi or api are not connected
            else:
              - switch.toggle: "relay_1"
        # release
    - timing:
        - ON for at least 1s
        - OFF for at least 0.1s
      then:
        - if:
            condition:
              and:
                - wifi.connected:
                - api.connected:
            # send long click event in case wifi and api are conncected
            then:
              - logger.log: "Release"
              - homeassistant.event:
                  event: esphome.button_pressed
                  data:
                    title: 4g button 1 release
            # toggle relay in case either wifi or api are not connected
            else:
              - switch.toggle: "relay_1"

  - platform: gpio
    pin:
      number: D10 
      mode: INPUT_PULLUP
      inverted: True
    name: "Night Lamp"
    on_click:
      - switch.toggle: "relay_2"
  - platform: gpio
    pin:
      number: D12 
      mode: INPUT_PULLUP
      inverted: True
    name: "Living Room Fan"
    on_click:
      - switch.toggle: "relay_3"
  - platform: gpio
    pin:
      number: D14 
      mode: INPUT_PULLUP
      inverted: True
    name: "Tuya Button 4"
    on_click:
      - switch.toggle: "relay_4"
    
switch:
  - platform: gpio
    name: "Relay 1"
    pin: D4
    id: "relay_1"
  - platform: gpio
    name: "Relay 2"
    pin: D3
    id: "relay_2"
  - platform: gpio
    name: "Relay 3"
    pin: D2 
    id: "relay_3"
  - platform: gpio
    name: "Relay 4"
    pin: D17
    id: "relay_4"
    
light:
  - platform: status_led
    id: led_red
    name: LED Backlight
    restore_mode: ALWAYS_ON
    entity_category: config
    pin:
      number: D16


light:
- platform: custom
  lambda: |-
    uint8_t light_address_1[6] = ${light_address_1};
    uint8_t light_address_2[6] = ${light_address_2};
    auto light_out_1 = new esp_now_light_RGB(light_address_1,1);
    auto light_out_2 = new esp_now_light_RGB(light_address_2,1);
    light_out_1->set_power_supply(id(power_supply1));
    light_out_2->set_power_supply(id(power_supply1));
    App.register_component(light_out_1);
    App.register_component(light_out_2);
    return {light_out_1, light_out_2};
  lights:
    - name: "Custom Light 1"
      effects:
      - automation:
          name: "My Slow Random Effect"
          sequence:
            lambda: ;
      - automation:
          name: "My Fast Random Effect"
          sequence:
            lambda: ;
    - name: "Custom Light 2"
      effects:
      - automation:
          name: "My Slow Random Effect"
          sequence:
            lambda: ;
      - automation:
          name: "My Fast Random Effect"
          sequence:
            lambda: ;
sensor:
  - platform: wifi_signal
    name: ${devicename} WiFi Signal Sensor
    unit_of_measurement: "%"
    filters:
    - lambda: |-
        if(x <= -100){
          return  0;
        } else if (x >= -50) {
          return 100;
        } else {
          return 2 * (x + 100);
        }
script:
  - id: light_status_script_1
    mode: restart
    then:
      - binary_sensor.template.publish:
          id: status_1
          state: ON
      - delay: 30s
      - binary_sensor.template.publish:
          id: status_1
          state: OFF
  - id: light_status_script_2
    mode: restart
    then:
      - binary_sensor.template.publish:
          id: status_2
          state: ON
      - delay: 30s
      - binary_sensor.template.publish:
          id: status_2
          state: OFF
          
binary_sensor:
  - platform: template
    name: "${devicename} Light 1 Status"
    id: status_1
    device_class: connectivity
  - platform: template
    name: "${devicename} Light 2 Status"
    id: status_2
    device_class: connectivity

custom_component:
- lambda: |-
    
    MeshRC::begin();
    ESP_LOGD("custom", "Initialising MeshRC");
    
    MeshRC::on("", [](uint8_t* data, uint8_t size) {
      // Process an incomming message, if it is directed to us, then we handle it.
      ESP_LOGD("custom", "Receiving any MeshRC message");
      
      uint8_t dest_1[6] = ${light_address_1};
      uint8_t dest_2[6] = ${light_address_2};
      if (size > 6 && MeshRC::equals(data, dest_1, 6) && (data[6] == '<')) {
      // Message on the communication channel with light_address_1
          uint8_t* newData = &data[5];
          ESP_LOGD("custom", "Receiving meshRC message");
          newData[0] = '1';
          MeshRC::recvHandler(MeshRC::sender, newData, size - 5);
      }
      else if (size > 6 && MeshRC::equals(data, dest_2, 6) && (data[6] == '<')) {
      // Message on the communication channel with light_address_2
          uint8_t* newData = &data[5];
          ESP_LOGD("custom", "Receiving meshRC message");
          newData[0] = '2';
          MeshRC::recvHandler(MeshRC::sender, newData, size - 5);
      }
    });
    
    
    MeshRC::on("1<PING", [](uint8_t* data, uint8_t size) {
      ESP_LOGD("custom", "Receiving meshRC message PING on 1");
      id(light_status_script_2).execute();
    });
    
    MeshRC::on("2<PING", [](uint8_t* data, uint8_t size) {
      ESP_LOGD("custom", "Receiving meshRC message PING on 2");
      id(light_status_script_2).execute();
    });
    return {};
     
